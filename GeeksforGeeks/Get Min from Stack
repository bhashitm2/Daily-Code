class Solution {
  public:
    Solution() {
        // code here
    }
stack<int>s;
stack<int> minStack;
    // Add an element to the top of Stack
    void push(int x) {
        // code here
        s.push(x);
        if (minStack.empty() || x <= minStack.top()) {
            minStack.push(x);
        }
    }

    // Remove the top element from the Stack
    void pop() {
        // code here
        if(!s.empty())
        {
            if (s.top() == minStack.top()) {
                minStack.pop();
            }
            s.pop();
        }
    }

    // Returns top element of the Stack
    int peek() {
        // code here
        
        if(!s.empty())
        {
            return s.top();
            
        }
        return -1;
    }

    // Finds minimum element of Stack
    int getMin() {
        // code here
        if (!minStack.empty()) {
            return minStack.top();
        }
        return -1;
    }
};
