class Solution {
public:
    bool dfs(int src,int target,vector<bool>&vis,vector<vector<int>>&adj){
        vis[src]=true;
        if(src==target)return true;
        int isFound=false;
        for(int a : adj[src]){
            if(!vis[a]){
                isFound=isFound||dfs(a,target,vis,adj);
            }
        }
        return isFound;
    }
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n = edges.size();
        vector<vector<int>>adj(n);
        for(auto it : edges){
            vector<bool>vis(n,false);
            if(dfs(it[0]-1,it[1]-1,vis,adj))return it;
            adj[it[0]-1].push_back(it[1]-1);
            adj[it[1]-1].push_back(it[0]-1);
        }
        return {};
    }
};
