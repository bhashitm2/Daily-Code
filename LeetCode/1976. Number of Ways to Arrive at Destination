class Solution {
public:
    int countPaths(int n, vector<vector<int>>& roads) {
        if(n==1)return 1;
        int mod = 1e9+7;
        int x=roads.size();
        int y=roads[0].size();
        vector<vector<pair<int,int>>>adj(n);
        for(auto it : roads){
            int u=it[0];
            int v=it[1];
            int w=it[2];
            adj[u].push_back({v,w});
            adj[v].push_back({u,w});
        }
        priority_queue<pair<long long,long long>,vector<pair<long long,long long>>,greater<pair<long long,long long>>>pq;
        vector<long long>dist(n,LLONG_MAX);
        vector<long long>ways(n,0);
        dist[0]=0;
        ways[0]=1;
        pq.push({0,0});
        while(!pq.empty()){
            auto it = pq.top();
            long long weight=it.first;
            long long node=it.second;
            pq.pop();
            for(auto it : adj[node]){
                long long nw=it.second;
                long long anode=it.first;
                if((weight+nw)<dist[anode]){
                    ways[anode]=ways[node];
                    dist[anode]=(weight+nw);
                    pq.push({(nw+weight),anode});
                }
                else if((weight+nw)==dist[anode]){
                    ways[anode]=(ways[anode]+ways[node])%mod;
                }
            }
        }
        return ways[n-1]%mod;
    }
};
