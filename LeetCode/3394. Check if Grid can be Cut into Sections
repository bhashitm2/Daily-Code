class Solution {
public:
    bool checkValidCuts(int n, vector<vector<int>>& rectangles) {
        vector<pair<int, int>> cuts;
        populateCuts(rectangles, cuts, 1, 3);
        if (isValidCut(cuts))
            return true;
        populateCuts(rectangles, cuts, 0, 2);
        return isValidCut(cuts);
    }
    void populateCuts(vector<vector<int>>& rectangles,
                      vector<pair<int, int>>& cuts, int xIdx, int yIdx) {
        int len = rectangles.size();
        cuts.clear();
        for (int i = 0; i < len; i++) {
            cuts.emplace_back(rectangles[i][xIdx], rectangles[i][yIdx]);
        }
    }
    bool isValidCut(vector<pair<int, int>>& cuts) {
        int n = cuts.size(), validCuts = 0, idx = 0;
        sort(cuts.begin(), cuts.end());

        while (idx < n - 1) {
            int currentY = cuts[idx].second;
            while (idx < n && cuts[idx].first < currentY) {
                currentY = max(currentY, cuts[idx].second);
                idx++;
            }
            if (idx < n)
                validCuts++;
        }

        return validCuts >= 2;
    }
};
