class Solution {
public:
    int bfs(vector<int>&max_dis,vector<vector<int>>&adj,vector<bool>&vis,int i){
        queue<int>q1;
        q1.push(i);
        vis[i]=true;
        int max_lvl=-1;
        while(!q1.empty()){
            int node = q1.front();
            q1.pop();
            max_lvl=max(max_lvl,max_dis[node]);
            for(auto it : adj[node]){
                if(!vis[it]){
                    vis[it]=true;
                    q1.push(it);
                }
            }
        }
        return max_lvl;
    }
    int countlevels(vector<vector<int>>&adj,int n,int i){
        vector<bool>vis(n+1,false);
        queue<int>q1;
        q1.push(i);
        vis[i]=true;
        int lvl=0;
        while(!q1.empty()){
            int size=q1.size();
            for(int i=0;i<size;i++){
                int node = q1.front();
                q1.pop();
                for(auto it : adj[node]){
                    if(!vis[it]){
                        vis[it]=true;
                        q1.push(it);
                    }
                }
            }
            lvl++;
        }
        return lvl;
    }
    bool dfs(int start,int col,vector<vector<int>>&edges,vector<int>&color){
        color[start]=col;
        for(auto it : edges[start]){
            if(color[it]==-1){
                if(!dfs(it,!col,edges,color))return false;
            }
            else if(color[it]==col)return false;
        }
        return true;
    }
    bool bipartite(int n,vector<vector<int>>&edges){
        vector<int>color(n+1,-1);
        for(int i=1;i<=n;i++){
            if(color[i]==-1){
                if(!dfs(i,0,edges,color))return false;
            }
        }
        return true;
    }
    int magnificentSets(int n, vector<vector<int>>& edges) {
        vector<vector<int>>adj(n+1);
        for(auto it : edges){
            int u=it[0];
            int v=it[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        if(!bipartite(n,adj))return -1;
        vector<int>max_dis(n+1,0);
        vector<bool>vis(n+1,false);
        for(int i=1;i<=n;i++){
            max_dis[i]=countlevels(adj,n,i);
        }
        int t_lvl=0;
        for(int i=1;i<=n;i++){
            if(!vis[i]){
                t_lvl+=bfs(max_dis,adj,vis,i);
            }
        }
        return t_lvl;
    }
};


//Hard Problem Try Understand it later too
